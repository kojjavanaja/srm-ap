
Source Code:

public class OrderTriggerHandler {

    public static void validateOrderQuantity(List<HandsMen_Order__c> orderList) {

        for (HandsMen_Order__c order : orderList) {

            if (order.Status__c == 'Confirmed') {

                if (order.Quantity__c == null || order.Quantity__c <= 500) {

                    order.Quantity__c.addError('For Status "Confirmed", Quantity must be more than 500.');

                }

            } else if (order.Status__c == 'Pending') {

                if (order.Quantity__c == null || order.Quantity__c <= 200) {

                    order.Quantity__c.addError('For Status "Pending", Quantity must be more than 200.');

                }

            } else if (order.Status__c == 'Rejection') {

                if (order.Quantity__c == null || order.Quantity__c != 0) {

                    order.Quantity__c.addError('For Status "Rejection", Quantity must be 0.');

                }

            }

        }

        System.debug('All records validated successfully.');

    }

}

source code:
trigger OrderTrigger on HandsMen_Order__c (before insert, before update) {

    if (Trigger.isBefore && (Trigger.isInsert || Trigger.isUpdate)) {

        OrderTriggerHandler.validateOrderQuantity(Trigger.new);

    }

}



trigger OrderTotalTrigger on HandsMen_Order__c (before insert, before update) {
    Set<Id> productIds = new Set<Id>();
 
    for (HandsMen_Order__c order : Trigger.new) {
        if (order.HandsMen_Product__c != null) {
            productIds.add(order.HandsMen_Product__c);
        }
    }
 
    Map<Id, HandsMen_Product_c> productMap = new Map<Id, HandsMen_Product_c>(
        [SELECT Id, Price_c FROM HandsMen_Product_c WHERE Id IN :productIds]
    );
 
    for (HandsMen_Order__c order : Trigger.new) {
        if (order.HandsMen_Product_c != null && productMap.containsKey(order.HandsMen_Product_c)) {
            HandsMen_Product_c product = productMap.get(order.HandsMen_Product_c);
            if (order.Quantity__c != null) {
                order.Total_Amount_c = order.Quantityc * product.Price_c;
            }
        }
    }
}



trigger StockDeductionTrigger on HandsMen_Order__c (after insert, after update) {
    Set<Id> productIds = new Set<Id>();
 
    for (HandsMen_Order__c order : Trigger.new) {
        if (order.Status_c == 'Confirmed' && order.HandsMen_Product_c != null) {
            productIds.add(order.HandsMen_Product__c);
        }
    }
 
    if (productIds.isEmpty()) return;
 
    // Query related inventories based on product
    Map<Id, Inventory_c> inventoryMap = new Map<Id, Inventory_c>(
        [SELECT Id, Stock_Quantity_c, HandsMen_Product_c 
         FROM Inventory__c 
         WHERE HandsMen_Product__c IN :productIds]
    );
 
    List<Inventory_c> inventoriesToUpdate = new List<Inventory_c>();
 
    for (HandsMen_Order__c order : Trigger.new) {
        if (order.Status_c == 'Confirmed' && order.HandsMen_Product_c != null) {
            for (Inventory__c inv : inventoryMap.values()) {
                if (inv.HandsMen_Product_c == order.HandsMen_Product_c) {
                    inv.Stock_Quantity_c -= order.Quantity_c;
                    inventoriesToUpdate.add(inv);
                    break;
                }
            }
        }
    }
 
    if (!inventoriesToUpdate.isEmpty()) {
        update inventoriesToUpdate;
    }
}